name: Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-24.04
    outputs:
      published: ${{ steps.semantic.outputs.new_release_published }}
      version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm ci

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4.1.1
        with:
          semantic_version: 24.1.0
          extra_plugins: |
            @semantic-release/commit-analyzer
            @semantic-release/release-notes-generator
            @semantic-release/github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    needs:
      - release
    if: needs.release.outputs.published == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/QuickGuideHealth/storage-api
          tags: |
            type=raw,value=v${{ needs.release.outputs.version }}
            type=raw,value=latest

      - uses: docker/setup-qemu-action@v2
        with:
          platforms: amd64,arm64
      - uses: docker/setup-buildx-action@v2

      - name: Debug permissions
        run: |
          echo "GitHub Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Repository Owner: ${{ github.repository_owner }}"

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v3
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            VERSION=${{ needs.release.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max